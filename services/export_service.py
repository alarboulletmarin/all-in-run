import io
import uuid
from datetime import datetime, timedelta
from xml.dom import minidom
from xml.etree import ElementTree as ET

from ics import Calendar, Event
from ics.alarm import DisplayAlarm
from ics.grammar.parse import ContentLine
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer

from config.languages import (
    DAYS_TRANSLATIONS,
    SESSION_TYPE_TRANSLATIONS,
    PHASE_TRANSLATIONS
)
from models.plan import TrainingPlan
from models.session import SessionType, TrainingPhase
from utils.date_utils import format_date
from utils.time_converter import format_timedelta, format_pace


class ExportService:
    """Service d'exportation du plan d'entra√Ænement"""

    def export_to_ics(self, plan: TrainingPlan, lang: str = "fr", options: dict = None) -> bytes:
        """
        Exporte le plan d'entra√Ænement au format ICS (calendrier)

        Args:
            plan: Plan d'entra√Ænement √† exporter
            lang: Code de langue
            options: Options suppl√©mentaires pour l'export
                - include_rest_days: Inclure les jours de repos (bool)
                - reminder_time: Minutes avant la s√©ance pour le rappel (int)
                - start_time: Heure de d√©but par d√©faut (int)
                - ics_calendar_name: Nom du calendrier (str)

        Returns:
            Contenu du fichier ICS en bytes
        """
        # Valeurs par d√©faut des options
        default_options = {
            "include_rest_days": False,
            "reminder_time": 30,
            "start_time": 18,
            "ics_calendar_name": "Training Plan"
        }
        
        # Fusionner avec les options fournies
        if options is None:
            options = {}
        
        for key, default_value in default_options.items():
            if key not in options:
                options[key] = default_value

        # Cr√©er un nouveau calendrier avec les m√©tadonn√©es requises
        calendar = Calendar()
        calendar.scale = 'GREGORIAN'
        calendar.method = 'PUBLISH'
        calendar.name = options["ics_calendar_name"]
        calendar.creator = 'All-in-Run Training Plan Generator'

        # Ajouter chaque s√©ance comme un √©v√©nement du calendrier
        for session_date, session in plan.sessions.items():
            if session.session_type == SessionType.REST and not options["include_rest_days"]:
                # Ignorer les jours de repos si l'option est d√©sactiv√©e
                continue

            # Cr√©er un √©v√©nement pour la s√©ance
            event = Event()

            # ID unique - crucial pour iOS
            event.uid = str(uuid.uuid4())

            # D√©terminer le titre de l'√©v√©nement
            session_type_name = SESSION_TYPE_TRANSLATIONS.get(lang, {}).get(
                session.session_type.value,
                session.session_type.value
            )

            event.name = f"üèÉ {session_type_name}"

            # Description d√©taill√©e
            description = []
            description.append(session.description)
            description.append("")

            if session.session_type != SessionType.REST:
                description.append(f"Distance: {session.total_distance} km")
                description.append(f"Dur√©e estim√©e: {format_timedelta(session.total_duration, 'hms_text')}")

            # Ajouter les d√©tails des blocs (si pr√©sents)
            if session.blocks:
                description.append("")
                description.append("D√©tail de la s√©ance:")
                for i, block in enumerate(session.blocks, 1):
                    description.append(f"- Bloc {i}: {block.distance} km @ {format_pace(block.pace)} ({block.description})")

            event.description = "\n".join(description)

            # Date et heure (utiliser l'heure de d√©but d√©finie dans les options)
            start_time = datetime.combine(session_date, datetime.min.time().replace(hour=options["start_time"]))

            # La dur√©e de l'√©v√©nement doit √™tre un timedelta pour ics
            duration = timedelta(minutes=max(30, int(session.total_duration.total_seconds() / 60)))

            event.begin = start_time
            event.duration = duration

            # Ajouter une alarme (rappel) avec le temps d√©fini dans les options
            reminder_time = options["reminder_time"]
            alarm = DisplayAlarm(trigger=timedelta(minutes=-reminder_time))
            event.alarms.append(alarm)

            # Cat√©gorie pour faciliter le filtrage
            event.categories = ['Training', 'Running']

            # Emplacement (optionnel, mais peut am√©liorer l'exp√©rience)
            event.location = "Course √† pied"

            # Ajouter l'√©v√©nement au calendrier
            calendar.events.add(event)

        # Convertir le calendrier en cha√Æne ICS

        # Ajouter les propri√©t√©s sp√©ciales X- au calendrier
        calendar.extra.append(
            ContentLine(name="X-WR-CALNAME", value=options['ics_calendar_name'])
        )
        calendar.extra.append(
            ContentLine(name="X-WR-CALDESC", value="Plan d'entra√Ænement running g√©n√©r√© par All-in-Run")
        )
        calendar.extra.append(
            ContentLine(name="X-WR-TIMEZONE", value="Europe/Paris")
        )
        
        # Ajouter des propri√©t√©s sp√©cifiques √† iOS
        calendar.extra.append(
            ContentLine(name="X-APPLE-CALENDAR-COLOR", value="#FF0000")
        )
        calendar.extra.append(
            ContentLine(name="X-APPLE-LOCAL-DEFAULT-ALARM", value="PT30M")
        )
        calendar.extra.append(
            ContentLine(name="X-APPLE-STRUCTURED-LOCATION", value=";;;")
        )
        
        ics_content = calendar.serialize()

        # Convertir en bytes avec l'encodage UTF-8 explicite
        return ics_content.encode("utf-8")

    def export_to_pdf(self, plan: TrainingPlan, lang: str = "fr", options: dict = None) -> bytes:
        """
        Exporte le plan d'entra√Ænement au format PDF

        Args:
            plan: Plan d'entra√Ænement √† exporter
            lang: Code de langue
            options: Options suppl√©mentaires pour l'export
                - include_charts: Inclure les graphiques (bool)
                - include_details: Inclure les d√©tails (bool)
                - paper_size: Taille du papier (str: "A4", "Letter", "Legal")
                - orientation: Orientation (str: "portrait", "landscape")

        Returns:
            Contenu du fichier PDF en bytes
        """
        # Valeurs par d√©faut des options
        default_options = {
            "include_charts": True,
            "include_details": True,
            "paper_size": "A4",
            "orientation": "portrait"
        }

        # Fusionner avec les options fournies
        if options is None:
            options = {}

        for key, default_value in default_options.items():
            if key not in options:
                options[key] = default_value

        buffer = io.BytesIO()

        # D√©terminer la taille de page
        page_size = A4  # Taille par d√©faut
        if options["paper_size"] == "Letter":
            from reportlab.lib.pagesizes import LETTER
            page_size = LETTER
        elif options["paper_size"] == "Legal":
            from reportlab.lib.pagesizes import LEGAL
            page_size = LEGAL

        # Appliquer l'orientation
        if options["orientation"] == "landscape":
            page_size = page_size[1], page_size[0]  # inverser largeur et hauteur

        # Cr√©er le document PDF
        doc = SimpleDocTemplate(
            buffer,
            pagesize=page_size,
            rightMargin=1.5*cm,
            leftMargin=1.5*cm,
            topMargin=1.5*cm,
            bottomMargin=1.5*cm
        )

        # Styles
        styles = getSampleStyleSheet()
        title_style = styles["Title"]
        heading_style = styles["Heading2"]
        heading3_style = styles["Heading3"]
        normal_style = ParagraphStyle(
            'Normal',
            fontName='Helvetica',
            fontSize=9,
            leading=12,
            spaceAfter=6,
            wordWrap='CJK'  # Permet le retour √† la ligne automatique
        )

        # Cr√©er le contenu du PDF
        content = []

        # Titre du document
        content.append(Paragraph(f"Plan d'entra√Ænement - {plan.user_data.main_race.race_type.value}", title_style))
        content.append(Spacer(1, 0.5*cm))

        # Informations g√©n√©rales
        content.append(Paragraph("Informations g√©n√©rales", heading_style))

        general_info = [
            ["Date de d√©but", format_date(plan.user_data.start_date, lang)],
            ["Date de course", format_date(plan.user_data.main_race.race_date, lang)],
            ["Nombre de semaines", str(plan.user_data.total_weeks)],
            ["Volume total", f"{plan.get_total_volume()} km"],
            ["Temps total estim√©", format_timedelta(plan.get_total_duration(), 'hms_text')]
        ]

        general_table = Table(general_info, colWidths=[4*cm, None])
        general_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('PADDING', (0, 0), (-1, -1), 6),
        ]))

        content.append(general_table)
        content.append(Spacer(1, 0.5*cm))

        # R√©partition des phases
        content.append(Paragraph("Phases d'entra√Ænement", heading_style))

        phase_stats = plan.get_phase_stats()
        phase_info = [["Phase", "Semaines", "Volume", "Temps estim√©"]]

        for phase in TrainingPhase:
            if phase in phase_stats:
                stats = phase_stats[phase]
                phase_name = PHASE_TRANSLATIONS.get(lang, {}).get(phase.value, phase.value)

                phase_info.append([
                    phase_name,
                    str(stats["num_weeks"]),
                    f"{stats['total_volume']} km",
                    format_timedelta(stats['total_duration'], 'hms_text')
                ])

        phase_table = Table(phase_info, colWidths=[4*cm, 2.5*cm, 3*cm, None])
        phase_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('PADDING', (0, 0), (-1, -1), 6),
        ]))

        content.append(phase_table)
        content.append(Spacer(1, 1*cm))

        # Plan d√©taill√© par semaine
        if options["include_details"]:
            content.append(Paragraph("Plan d√©taill√©", heading_style))

            sessions_by_week = plan.get_sessions_by_week()

            for week_num in sorted(sessions_by_week.keys()):
                week_start, week_end = plan.get_week_dates(week_num)

                # D√©terminer la phase de la semaine
                week_phase = None
                for day in range(7):
                    day_date = week_start + timedelta(days=day)
                    day_phase = plan.get_phase_for_date(day_date)
                    if day_phase:
                        week_phase = day_phase
                        break

                # Traduire le nom de la phase
                phase_name = PHASE_TRANSLATIONS.get(lang, {}).get(
                    week_phase.value if week_phase else "",
                    week_phase.value if week_phase else ""
                )

                # Titre de la semaine avec la phase
                week_title = f"Semaine {week_num + 1} - {phase_name}: {format_date(week_start, lang, False)} - {format_date(week_end, lang, False)}"
                content.append(Paragraph(week_title, heading3_style))

                # Informations sur la semaine
                week_volume = plan.get_weekly_volume(week_num)
                week_duration = plan.get_weekly_duration(week_num)

                week_info = [
                    ["Volume", f"{week_volume} km"],
                    ["Temps estim√©", format_timedelta(week_duration, 'hms_text')]
                ]

                week_table = Table(week_info, colWidths=[3*cm, None])
                week_table.setStyle(TableStyle([
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('PADDING', (0, 0), (-1, -1), 6),
                ]))

                content.append(week_table)
                content.append(Spacer(1, 0.3*cm))

                # Tableau des s√©ances de la semaine
                sessions_info = []
                sessions_info.append([
                    Paragraph("Type", normal_style),
                    Paragraph("Distance", normal_style),
                    Paragraph("Temps", normal_style),
                    Paragraph("Description", normal_style)
                ])

                # Trier les s√©ances par jour de la semaine
                week_sessions = sorted(
                    sessions_by_week[week_num],
                    key=lambda s: s.session_date.weekday()
                )

                for session in week_sessions:
                    day_name = DAYS_TRANSLATIONS.get(lang, {}).get(
                        session.session_date.weekday(),
                        session.session_date.strftime("%A")
                    )

                    session_type_name = SESSION_TYPE_TRANSLATIONS.get(lang, {}).get(
                        session.session_type.value,
                        session.session_type.value
                    )

                    # Pr√©fixer avec le jour de la semaine
                    full_type_name = f"{day_name}: {session_type_name}"

                    if session.session_type == SessionType.REST:
                        sessions_info.append([
                            Paragraph(full_type_name, normal_style),
                            Paragraph("-", normal_style),
                            Paragraph("-", normal_style),
                            Paragraph("Repos", normal_style)
                        ])
                    else:
                        # Utiliser Paragraph pour permettre le retour √† la ligne automatique
                        sessions_info.append([
                            Paragraph(full_type_name, normal_style),
                            Paragraph(f"{session.total_distance} km", normal_style),
                            Paragraph(format_timedelta(session.total_duration, 'hms'), normal_style),
                            Paragraph(session.description, normal_style)
                        ])

                # Cr√©er le tableau avec des largeurs de colonne ajust√©es
                # La 4e colonne (description) est plus large pour √©viter les coupures
                sessions_table = Table(sessions_info, colWidths=[4*cm, 2*cm, 2.5*cm, 9*cm])
                sessions_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Aligner en haut pour le texte multiligne
                    ('PADDING', (0, 0), (-1, -1), 6),
                ]))

                content.append(sessions_table)
                content.append(Spacer(1, 0.7*cm))

        # G√©n√©rer le PDF
        doc.build(content)

        # R√©cup√©rer le contenu du buffer
        buffer.seek(0)
        return buffer.getvalue()

    def export_to_json(self, plan: TrainingPlan) -> str:
        """
        Exporte le plan d'entra√Ænement au format JSON

        Args:
            plan: Plan d'entra√Ænement √† exporter

        Returns:
            Cha√Æne JSON
        """
        return plan.to_json()

    def export_to_tcx(self, plan: TrainingPlan, lang: str = "fr") -> bytes:
        """
        Exporte le plan d'entra√Ænement au format TCX pour montres Garmin

        Args:
            plan: Plan d'entra√Ænement √† exporter
            lang: Code de langue

        Returns:
            Contenu du fichier TCX en bytes
        """


        # Cr√©er la structure XML de base
        root = ET.Element("TrainingCenterDatabase")
        root.set("xmlns", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2")
        root.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
        root.set("xsi:schemaLocation", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd")

        # Ajouter l'√©l√©ment Workouts
        workouts = ET.SubElement(root, "Workouts")

        # Traiter chaque s√©ance comme un workout s√©par√©
        for session_date, session in plan.sessions.items():
            if session.session_type == SessionType.REST:
                # Ignorer les jours de repos
                continue

            # Cr√©er l'entra√Ænement
            workout = ET.SubElement(workouts, "Workout")
            workout.set("Sport", "Running")

            # Nom de la s√©ance
            session_type_name = SESSION_TYPE_TRANSLATIONS.get(lang, {}).get(
                session.session_type.value,
                session.session_type.value
            )

            name = ET.SubElement(workout, "Name")
            name.text = f"{format_date(session_date, lang, False)} - {session_type_name}"

            # Optionnel: ajouter les notes/description
            notes = ET.SubElement(workout, "Notes")
            notes.text = session.description

            # Cr√©er les √©tapes de l'entra√Ænement
            step_id = 1

            # Si la s√©ance a des blocs, les utiliser, sinon cr√©er un bloc unique
            if session.blocks:
                for block in session.blocks:
                    # Cr√©er un bloc d'entra√Ænement
                    step = ET.SubElement(workout, "Step")
                    step.set("xsi:type", "Step_t")

                    # ID de l'√©tape
                    id_elem = ET.SubElement(step, "StepId")
                    id_elem.text = str(step_id)
                    step_id += 1

                    # Nom de l'√©tape
                    name = ET.SubElement(step, "Name")
                    name.text = block.description

                    # Dur√©e de l'√©tape (en distance)
                    duration = ET.SubElement(step, "Duration")
                    duration.set("xsi:type", "Distance_t")

                    meters = ET.SubElement(duration, "Meters")
                    meters.text = str(int(block.distance * 1000))

                    # Intensit√© (Active ou Rest)
                    intensity = ET.SubElement(step, "Intensity")
                    intensity.text = "Active"

                    # Allure cible
                    target = ET.SubElement(step, "Target")
                    target.set("xsi:type", "Speed_t")

                    speed_zone = ET.SubElement(target, "SpeedZone")

                    # Convertir l'allure (min/km) en vitesse (m/s)
                    pace_seconds = block.pace.total_seconds()
                    speed_mps = 1000 / pace_seconds  # m√®tres par seconde

                    # Cr√©er une plage d'allures (+/- 5%)
                    low = ET.SubElement(speed_zone, "LowInMetersPerSecond")
                    low.text = f"{speed_mps * 0.95:.2f}"

                    high = ET.SubElement(speed_zone, "HighInMetersPerSecond")
                    high.text = f"{speed_mps * 1.05:.2f}"
            else:
                # Si pas de blocs, cr√©er une √©tape unique pour la session compl√®te
                step = ET.SubElement(workout, "Step")
                step.set("xsi:type", "Step_t")

                id_elem = ET.SubElement(step, "StepId")
                id_elem.text = "1"

                name = ET.SubElement(step, "Name")
                name.text = session_type_name

                duration = ET.SubElement(step, "Duration")
                duration.set("xsi:type", "Distance_t")

                meters = ET.SubElement(duration, "Meters")
                meters.text = str(int(session.total_distance * 1000))

                intensity = ET.SubElement(step, "Intensity")
                intensity.text = "Active"

                # Pour une s√©ance simple, utiliser l'allure EF comme r√©f√©rence
                target = ET.SubElement(step, "Target")
                target.set("xsi:type", "Speed_t")

                speed_zone = ET.SubElement(target, "SpeedZone")

                # Estimer la vitesse moyenne
                avg_speed = 1000 / plan.user_data.pace_marathon.total_seconds()

                low = ET.SubElement(speed_zone, "LowInMetersPerSecond")
                low.text = f"{avg_speed * 0.95:.2f}"

                high = ET.SubElement(speed_zone, "HighInMetersPerSecond")
                high.text = f"{avg_speed * 1.05:.2f}"

            # √âl√©ment ScheduledOn obligatoire - date de la s√©ance
            scheduled = ET.SubElement(workout, "ScheduledOn")
            scheduled.text = session_date.strftime("%Y-%m-%d")

        # Convertir l'arbre ElementTree en cha√Æne XML bien format√©e
        rough_string = ET.tostring(root, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        pretty_xml = reparsed.toprettyxml(indent="  ", encoding="utf-8")

        return pretty_xml